// Service pour g√©rer les interactions avec le chatbot
class ChatbotService {
  constructor() {
    this.apiUrl = "http://localhost:8000"
    this.isOnline = true
    this.offlineResponses = this.getOfflineResponses()
  }

  // R√©ponses hors ligne pr√©-enregistr√©es
  getOfflineResponses() {
    return {
      navigation: {
        keywords: ["navigation", "naviguer", "menu", "sidebar", "page"],
        response: `üß≠ **Navigation dans l'application** :

üîπ **Sidebar gauche** : 3 ic√¥nes principales
   ‚Ä¢ üìä **Statistiques** : Vue d'ensemble et graphiques  
   ‚Ä¢ üì¶ **Stock** : Gestion des produits (page principale)
   ‚Ä¢ üìà **Mouvements** : Historique des entr√©es/sorties

üîπ **Header** : Titre "Gestion de Stock" et bouton d√©connexion

üí° Cliquez sur les ic√¥nes pour naviguer entre les pages !`,
      },
      stock: {
        keywords: ["stock", "produit", "tableau", "g√©rer"],
        response: `üì¶ **Gestion des stocks** :

‚úÖ **Actions disponibles** :
   ‚Ä¢ Ajouter un nouveau produit
   ‚Ä¢ Modifier les informations
   ‚Ä¢ Supprimer des produits
   ‚Ä¢ Filtrer par cat√©gorie/type

üîç **Recherche** : Utilisez la barre de recherche pour trouver rapidement vos produits

üìã Le tableau affiche toutes les informations importantes de vos produits`,
      },
      help: {
        keywords: ["aide", "help", "bonjour", "salut", "comment"],
        response: `üëã **Bienvenue dans l'assistant de gestion de stock !**

ü§ñ Je peux vous aider avec :
   ‚Ä¢ Navigation dans l'application
   ‚Ä¢ Gestion des stocks et produits  
   ‚Ä¢ Utilisation des filtres
   ‚Ä¢ Questions g√©n√©rales

üí° **Mode hors ligne** : R√©ponses de base disponibles m√™me sans connexion

‚ùì Posez-moi vos questions sur l'utilisation de l'application !`,
      },
      default: {
        keywords: [],
        response: `ü§ñ **Assistant hors ligne**

Je suis actuellement en mode hors ligne avec des r√©ponses de base.

üìã **Sujets disponibles** :
   ‚Ä¢ Navigation dans l'application
   ‚Ä¢ Gestion des stocks
   ‚Ä¢ Aide g√©n√©rale

üí° **Mots-cl√©s utiles** : "navigation", "stock", "aide", "comment"

üîÑ La connexion sera r√©tablie automatiquement d√®s que possible.`,
      },
    }
  }

  // V√©rifier la connexion √† l'API
  async checkConnection() {
    try {
      const response = await fetch(`${this.apiUrl}/health`, {
        method: "GET",
        timeout: 3000,
      })
      this.isOnline = response.ok
      return this.isOnline
    } catch (error) {
      this.isOnline = false
      return false
    }
  }

  // Trouver une r√©ponse hors ligne
  findOfflineResponse(message) {
    const lowerMessage = message.toLowerCase()

    for (const [key, data] of Object.entries(this.offlineResponses)) {
      if (key === "default") continue

      const hasKeyword = data.keywords.some((keyword) => lowerMessage.includes(keyword))

      if (hasKeyword) {
        return data.response
      }
    }

    return this.offlineResponses.default.response
  }

  // Envoyer un message au chatbot
  async sendMessage(messages) {
    // V√©rifier la connexion
    const isConnected = await this.checkConnection()

    if (!isConnected) {
      // Mode hors ligne
      const lastMessage = messages[messages.length - 1]
      const offlineResponse = this.findOfflineResponse(lastMessage.content)

      return {
        message: offlineResponse,
        isOffline: true,
      }
    }

    try {
      // Mode en ligne
      const response = await fetch(`${this.apiUrl}/chat`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ messages }),
        timeout: 10000,
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      return {
        message: data.message,
        isOffline: false,
      }
    } catch (error) {
      console.error("Erreur API chatbot:", error)

      // Fallback vers mode hors ligne
      const lastMessage = messages[messages.length - 1]
      const offlineResponse = this.findOfflineResponse(lastMessage.content)

      return {
        message: offlineResponse,
        isOffline: true,
      }
    }
  }

  // Questions sugg√©r√©es
  getSuggestedQuestions() {
    return [
      "Comment naviguer dans l'application ?",
      "Comment ajouter un nouveau produit ?",
      "Comment utiliser les filtres ?",
      "O√π voir les statistiques ?",
      "Comment g√©rer les mouvements de stock ?",
    ]
  }
}

export default new ChatbotService()
